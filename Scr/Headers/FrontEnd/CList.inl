//DEER_0(id, name, word, fontcolor, color, fillcolor, shape, style, code)
//DEER_1(id, name, word, fontcolor, color, fillcolor, shape, style, code)
//DEER_2(id, name, word, fontcolor, color, fillcolor, shape, style, code)

#define TO_STRING(prefix) { prefix + std::to_string (value.value) }

DEER_0 ( 0,        Digit, TO_STRING      (""), { give_Digit    (current, write); })
DEER_0 ( 1,         Name, TO_STRING ("name_"), { give_Name     (current, write); })
DEER_1 ( 2,        Block,             "block", { give_Block    (current, write); })
DEER_1 ( 3,      DeclVar,          "decl_var", { give_DeclVar  (current, write); })
DEER_1 ( 4,     DeclFunc,         "decl_func", { give_DeclFunc (current, write); })
DEER_1 ( 5,         Call,              "call", { give_Call     (current, write); })
DEER_1 ( 6,       Params,            "params", {})
DEER_1 ( 7,        Equal,                "==", { give_Equal_NotEqual_Less_LessEqual_More_MoreEqual (current, write, "je", "jne"); })
DEER_1 ( 8,     NotEqual,                "!=", { give_Equal_NotEqual_Less_LessEqual_More_MoreEqual (current, write, "jne", "jn"); })
DEER_1 ( 9,          And,                "&&", { give_And (current, write); })
DEER_1 (10,           Or,                "||", { give_Or  (current, write); })
DEER_1 (11,          Not,                 "!", {})
DEER_1 (12,    LessEqual,                "<=", { give_Equal_NotEqual_Less_LessEqual_More_MoreEqual (current, write, "je", "jne"); })
DEER_1 (13,    MoreEqual,                ">=", { give_Equal_NotEqual_Less_LessEqual_More_MoreEqual (current, write, "je", "jne"); })
DEER_1 (14,          Mul,                 "*", { give_Add_Sub_Mul_Div_Mod (current, write, "mul"); })
DEER_1 (15,          Div,                 "/", { give_Add_Sub_Mul_Div_Mod (current, write, "div"); })
DEER_1 (16,          Mod,                "%%", { give_Add_Sub_Mul_Div_Mod (current, write, "mod"); })
DEER_1 (17,          Add,                 "+", { give_Add_Sub_Mul_Div_Mod (current, write, "add"); })
DEER_1 (18,          Sub,                 "-", { give_Add_Sub_Mul_Div_Mod (current, write, "sub"); })
DEER_1 (19,   Assingment,                 "=", { give_Assignment (current, write); })
DEER_1 (20,         Less,                 "<", {})
DEER_1 (21,         More,                 ">", {})
DEER_1 (22,       BitAnd,                 "&", {})
DEER_1 (23,        BitOr,                 "|", {})
DEER_1 (24,       BitXor,                 "^", {})
DEER_1 (25,       BitNot,                 "~", {})
DEER_1 (26,    ShiftLeft,                "<<", {})
DEER_1 (27,   ShiftRight,                ">>", {})
DEER_1 (28,     AddEqual,                "+=", {})
DEER_1 (29,     SubEqual,                "-=", {})
DEER_1 (30,     MulEqual,                "*=", {})
DEER_1 (31,     DivEqual,                "/=", {})
DEER_1 (32,     ModEqual,                "%=", {})
DEER_1 (33,     AndEqual,                "&=", {})
DEER_1 (34,      OrEqual,                "|=", {})
DEER_1 (35,     XorEqual,                "^=", {})
DEER_1 (36,    Increment,                "++", {})
DEER_1 (37,    Decrement,                "--", {})
DEER_1 (38,           If,                "if", { give_If (current, write); })
DEER_1 (39,        While,             "while", { give_While (current, write); })
DEER_1 (40,          Int,               "int", {})
DEER_1 (41,         Void,              "void", {})
DEER_1 (42,       Return,            "return", { give_Return (current, write); })
DEER_1 (43,        Break,             "break", {})
DEER_1 (44,          Out,               "out", { give_Out (current, write); })
DEER_1 (45,     Continue,          "continue", {})
DEER_1 (46,        Begin,                 "{", {})
DEER_1 (47,          End,                 "}", {})
DEER_1 (48,   EndOfToken,                 ";", {})
DEER_1 (49,  OpenBracket,                 "(", {})
DEER_1 (50, CloseBracket,                 ")", {})
DEER_1 (51,         Else,              "else", {})
DEER_1 (52,        Comma,                 ",", {})
DEER_2 (53,      Include,           "include", {})
DEER_2 (54,       Define,            "define", {})
DEER_2 (55,        Undef,             "undef", {})

#undef TO_STRING
