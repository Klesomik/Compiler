
Система для трансляции и исполнения программ на C-подобном языке


==========================================================================================================================

Цель работы: Разработка системы трансляции и исполнения программ на C-подобном языке

Этот проект был логическим продолжением тестирующей системы "TxSiri".

==========================================================================================================================

Задачи проекта являлись:
    int main (int argc, const char** argv)
    {
        1) Создание собственного ассемблера - Boa
        {
            a) Разработка модуля для трансляции команд Boa в собственный машинный код (байткод);
	    b) Разработка CPU - модуля, исполняющего байткод;
        }   

        2) Создание компилятора C-подобного языка - Deer
        {
	    a) Разработка лексического анализатора;
	    b) Разработка препроцессора;
	    c) Разработка синтаксического анализатора;
	    d) Разработка семантического анализатора;
	    e) Разработка оптимизатора;
	    f) Разработка кодогенератора; 
        }
        3) Соединение частей проекта вместе
	
	return 0;
    }

==========================================================================================================================

Вся система в целом работает следующим образом:

1) Source           (исходный код); 
2) LexicialAnalyzer (трансляция команд); 
3) Preprocessor     (команды в языке, выполняющиеся до построения синтаксического дерева);
4) SyntaxAnalyzer   (построение синтаксического дерева);
5) SemanticAnalyzer (обнаружение логических ошибок);
6) Optimizer        (оптимизация синтаксического дерева);
7) CodeGenerate     (проход по дереву и генерирование по нему ассемблерного кода);
7) AsmParser        (трансляция команд Boa в байткод);
8) CPU              (исполнение байткода на виртуальной машине);

В результате мы наблюдаем на экране исполненную программу.

==========================================================================================================================

Бинарное дерево из Siri послужило идеей для создания на его основе более мощного - синтаксического дерева AST (Abstract Syntax Tree).
Помимо этого было написано еще несколько интересных структур данных, но это секрет :)

==========================================================================================================================

Ассемблер был назван Boa - удав.

Для более удобного ориентирования в ассемблерном коде, синтаксис Boa был максимально приближен к синтаксису asm x86.
  
==========================================================================================================================

А теперь самое главное...
Компилятор был назван изящным словом Deer, что в переводе с анлийского означает Олень ^_^

Название это было выбрано не случайно.
Оно отражает всю примитивность написанного компилятора и его недостатки.
 
Deer еще очень далеко до таких компиляторов как: GCC, CLang, CL, и других.
 
Благодарая Deer Был получен, бесценный опыт и изучено множество алгоритмов.

==========================================================================================================================

Проект был написан на языке программирования C++ (GCC g++ v.5.3.0), в среде программирования Code::Blocks.
Объем кода составил ~ 5000 строк.

Да пребудет с вами сила!
