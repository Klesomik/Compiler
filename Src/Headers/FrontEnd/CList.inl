//DEER(id, name, word, fontcolor, color, fillcolor, shape, style, code_generation, dis_syntax_analyzer)

#define TO_STRING(prefix) { prefix + std::to_string (value.value) }

DEER ( 0,        Digit, TO_STRING      (""), "darkgreen", "darkgreen",   "#98FF66",     "box", "rounded, filled", { give_Digit    (current, write);                                                  }, { get (from, to); })
DEER ( 1,         Name, TO_STRING ("name_"), "darkgreen", "darkgreen",   "#98FF66",     "box", "rounded, filled", { give_Name     (current, write);                                                  }, { get (from, to); })
DEER ( 2,        Block,             "block",     "black",     "black", "lightgrey", "ellipse", "rounded, filled", { give_Block    (current, write);                                                  }, { decl_block (from, to); })
DEER ( 3,      DeclVar,          "decl_var",     "black",     "black", "lightgrey", "ellipse", "rounded, filled", { give_DeclVar  (current, write);                                                  }, { decl_var (from, to); })
DEER ( 4,     DeclFunc,         "decl_func",     "black",     "black", "lightgrey", "ellipse", "rounded, filled", { give_DeclFunc (current, write);                                                  }, { decl_func (from, to); })
DEER ( 5,         Call,              "call",     "black",     "black", "lightgrey", "ellipse", "rounded, filled", { give_Call     (current, write);                                                  }, {})
DEER ( 6,       Params,            "params",     "black",     "black", "lightgrey", "ellipse", "rounded, filled", {                                                                                  }, {})
DEER ( 7,        Equal,                "==",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", { give_Equal_NotEqual_Less_LessEqual_More_MoreEqual (current, write, "je", "jne"); }, { binary_operation (from, to); })
DEER ( 8,     NotEqual,                "!=",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", { give_Equal_NotEqual_Less_LessEqual_More_MoreEqual (current, write, "jne", "jn"); }, { binary_operation (from, to); })
DEER ( 9,          And,                "&&",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", { give_And (current, write);                                                       }, { binary_operation (from, to); })
DEER (10,           Or,                "||",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", { give_Or  (current, write);                                                       }, { binary_operation (from, to); })
DEER (11,          Not,                 "!",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", {                                                                                  }, { binary_operation (from, to); })
DEER (12,    LessEqual,                "<=",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", { give_Equal_NotEqual_Less_LessEqual_More_MoreEqual (current, write, "je", "jne"); }, { binary_operation (from, to); })
DEER (13,    MoreEqual,                ">=",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", { give_Equal_NotEqual_Less_LessEqual_More_MoreEqual (current, write, "je", "jne"); }, { binary_operation (from, to); })
DEER (14,          Mul,                 "*",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", { give_Add_Sub_Mul_Div_Mod (current, write, "mul");                                }, { binary_operation (from, to); })
DEER (15,          Div,                 "/",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", { give_Add_Sub_Mul_Div_Mod (current, write, "div");                                }, { binary_operation (from, to); })
DEER (16,          Mod,                "%%",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", { give_Add_Sub_Mul_Div_Mod (current, write, "mod");                                }, { binary_operation (from, to); })
DEER (17,          Add,                 "+",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", { give_Add_Sub_Mul_Div_Mod (current, write, "add");                                }, { binary_operation (from, to); })
DEER (18,          Sub,                 "-",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", { give_Add_Sub_Mul_Div_Mod (current, write, "sub");                                }, { binary_operation (from, to); })
DEER (19,   Assingment,                 "=",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", { give_Assignment (current, write);                                                }, { binary_operation (from, to); })
DEER (20,         Less,                 "<",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", {                                                                                  }, { binary_operation (from, to); })
DEER (21,         More,                 ">",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", {                                                                                  }, { binary_operation (from, to); })
DEER (22,       BitAnd,                 "&",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", {                                                                                  }, { binary_operation (from, to); })
DEER (23,        BitOr,                 "|",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", {                                                                                  }, { binary_operation (from, to); })
DEER (24,       BitXor,                 "^",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", {                                                                                  }, { binary_operation (from, to); })
DEER (25,       BitNot,                 "~",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", {                                                                                  }, { binary_operation (from, to); })
DEER (26,    ShiftLeft,                "<<",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", {                                                                                  }, { binary_operation (from, to); })
DEER (27,   ShiftRight,                ">>",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", {                                                                                  }, { binary_operation (from, to); })
DEER (28,     AddEqual,                "+=",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", {                                                                                  }, { binary_operation (from, to); })
DEER (29,     SubEqual,                "-=",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", {                                                                                  }, { binary_operation (from, to); })
DEER (30,     MulEqual,                "*=",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", {                                                                                  }, { binary_operation (from, to); })
DEER (31,     DivEqual,                "/=",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", {                                                                                  }, { binary_operation (from, to); })
DEER (32,     ModEqual,                "%=",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", {                                                                                  }, { binary_operation (from, to); })
DEER (33,     AndEqual,                "&=",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", {                                                                                  }, { binary_operation (from, to); })
DEER (34,      OrEqual,                "|=",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", {                                                                                  }, { binary_operation (from, to); })
DEER (35,     XorEqual,                "^=",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", {                                                                                  }, { binary_operation (from, to); })
DEER (36,    Increment,                "++",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", {                                                                                  }, {})
DEER (37,    Decrement,                "--",       "red",       "red",   "#FFCCC9",     "box", "rounded, filled", {                                                                                  }, {})
DEER (38,           If,                "if",      "blue",      "blue", "lightblue",     "box", "rounded, filled", { give_If (current, write);                                                        }, { decl_if (from, to); })
DEER (39,        While,             "while",      "blue",      "blue", "lightblue",     "box", "rounded, filled", { give_While (current, write);                                                     }, { decl_while (from, to); })
DEER (40,          Int,               "int",      "blue",      "blue", "lightblue",     "box", "rounded, filled", {                                                                                  }, { get (from, to); })
DEER (41,         Void,              "void",      "blue",      "blue", "lightblue",     "box", "rounded, filled", {                                                                                  }, { get (from, to); })
DEER (42,       Return,            "return",      "blue",      "blue", "lightblue",     "box", "rounded, filled", { give_Return (current, write);                                                    }, { get (from, to); })
DEER (43,        Break,             "break",      "blue",      "blue", "lightblue",     "box", "rounded, filled", {                                                                                  }, { get (from, to); })
DEER (44,          Out,               "out",      "blue",      "blue", "lightblue",     "box", "rounded, filled", { give_Out (current, write);                                                       }, {})
DEER (45,     Continue,          "continue",      "blue",      "blue", "lightblue",     "box", "rounded, filled", {                                                                                  }, {})
DEER (46,        Begin,                 "{",      "blue",      "blue", "lightblue",     "box", "rounded, filled", {                                                                                  }, {})
DEER (47,          End,                 "}",      "blue",      "blue", "lightblue",     "box", "rounded, filled", {                                                                                  }, {})
DEER (48,   EndOfToken,                 ";",      "blue",      "blue", "lightblue",     "box", "rounded, filled", {                                                                                  }, {})
DEER (49,  OpenBracket,                 "(",      "blue",      "blue", "lightblue",     "box", "rounded, filled", {                                                                                  }, {})
DEER (50, CloseBracket,                 ")",      "blue",      "blue", "lightblue",     "box", "rounded, filled", {                                                                                  }, {})
DEER (51,         Else,              "else",      "blue",      "blue", "lightblue",     "box", "rounded, filled", {                                                                                  }, {})
DEER (52,        Comma,                 ",",      "blue",      "blue", "lightblue",     "box", "rounded, filled", {                                                                                  }, {})
DEER (53,      Include,           "include",      "blue",      "blue", "lightblue",     "box", "rounded, filled", {                                                                                  }, {})
DEER (54,       Define,            "define",      "blue",      "blue", "lightblue",     "box", "rounded, filled", {                                                                                  }, {})
DEER (55,        Undef,             "undef",      "blue",      "blue", "lightblue",     "box", "rounded, filled", {                                                                                  }, {})

#undef TO_STRING
